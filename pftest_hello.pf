! 1. This test suite should be executed with atleast 3 MPI processes
! 2. When building these tests pass the "-DUSE_MPI=YES" to the 
! compiler. If this option is not provided only the non-MPI tests,
! tests that don't have npes specified, will be run

module test_helloworld
  use pfunit_mod
contains

@test
  subroutine test_hello()
    implicit none

    call hello()
    @assertTrue(.true.)
  end subroutine test_hello

@test(npes=[1])
  subroutine test_hello_single_proc(this)
    implicit none
    class (MpiTestMethod), intent(inout) :: this
    integer comm, size, rank, tmp
    integer ierr

    print *, "Test resticted to single proc"
    comm = this%getMpiCommunicator()
    call comm_hello(comm)

    call MPI_COMM_SIZE(comm, size, ierr)
    tmp = this%getNumProcesses()
    @mpiAssertEqual(size, tmp)

    @mpiAssertEqual(size, 1)
  end subroutine test_hello_single_proc

! This test is run twice
! 1) With 2 procs
! 2) With 3 procs
@test(npes=[2,3])
  subroutine test_hello_multi_proc(this)
    implicit none
    class (MpiTestMethod), intent(inout) :: this
    integer comm, size, rank
    integer ierr

    print *, "Test resticted for 2 & 3 procs"
    comm = this%getMpiCommunicator()

    call MPI_COMM_SIZE(comm, size, ierr)
    @mpiAssertTrue((size == 2) .OR. (size ==3))

    call MPI_COMM_RANK(comm, rank, ierr)
    if(size == 2) then
      @mpiAssertTrue((rank == 0) .OR. (rank == 1))
    else
      @mpiAssertTrue((rank == 0) .OR. (rank == 1) .OR. (rank == 2))
    endif
    call rank_hello(rank)
  end subroutine test_hello_multi_proc

@test(npes=[2,3])
  subroutine test_hello_mpi_openmp(this)
    implicit none
    class (MpiTestMethod), intent(inout) :: this
    integer comm, size, rank
    integer ierr

    !$OMP PARALLEL
    print *, "Test resticted for 2 & 3 procs"
    !$OMP END PARALLEL
    comm = this%getMpiCommunicator()

    call MPI_COMM_SIZE(comm, size, ierr)
    @mpiAssertTrue((size == 2) .OR. (size ==3))

    call MPI_COMM_RANK(comm, rank, ierr)
    if(size == 2) then
      @mpiAssertTrue((rank == 0) .OR. (rank == 1))
    else
      @mpiAssertTrue((rank == 0) .OR. (rank == 1) .OR. (rank == 2))
    endif
    call rank_hello(rank)
  end subroutine test_hello_mpi_openmp

@test
  subroutine test_asserts()
    implicit none

    integer :: one = 1, two = 2

    @assertEqual(one, 1)
    @assertEqual(one, 1, "one is not equal to 1")
    @assertTrue(one == 1)
    @assertTrue(one == 1, "(one == 1) is not true")
    @assertFalse(one /= 1)
    @assertFalse(one /= 1, "(one /= 1) is not false")
    @assertLessThan(one, two)
    @assertLessThan(one, two, "one is not less than two")
    @assertLessThanOrEqual(one, two)
    @assertLessThanOrEqual(one, two, "one is not less than or equal to two")
    @assertGreaterThan(two, one)
    @assertGreaterThan(two, one, "two is not greater than one")
    @assertGreaterThanOrEqual(two, one)
    @assertGreaterThanOrEqual(two, one, "two is not greater than or equal to one")
    @assertAny([one == 1, two == 1])
    @assertAny([one == 1, two == 1], "one is not equal to 1 AND two is not equal to 1")
    @assertAll([one == 1, two == 2])
    @assertAll([one == 1, two == 2], "one is not equal to 1 OR two is not equal to 2")
    @assertNone([one /= 1, two /= 2])
    @assertNone([one /= 1, two /= 2], "one is not equal to 1 OR two is not equal to 2")
  end subroutine test_asserts
end module test_helloworld

